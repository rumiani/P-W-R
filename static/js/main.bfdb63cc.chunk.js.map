{"version":3,"sources":["components/Result/Result.tsx","components/Spinner/Spinner.tsx","App.tsx","index.tsx"],"names":["Result","props","picUrl","result","word","getData","className","pronunciation","definitions","map","value","index","type","parse","definition","emoji","href","target","example","image_url","src","alt","Spinner","loading","noResult","err","input","App","useState","setInput","setResult","setGetData","setLoading","setNoResult","warnInput","setWarnInput","setErr","lookUp","fetch","headers","Authorization","then","res","json","message","catch","onKeyUp","event","keyCode","onChange","e","placeholder","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAOaA,EAA4B,SAACC,GAAW,IAAD,EAC1CC,EAAa,0CAAsCD,EAAME,OAAOC,KAAnD,0XACnB,OAAS,8BACIH,EAAMI,QACH,sBAAKC,UAAY,SAAjB,UACI,qBAAKA,UAAY,OAAjB,SACI,iCAASL,EAAME,OAAOC,SAEM,OAA/BH,EAAME,OAAOI,cACV,sBAAKD,UAAU,gBAAf,UACI,iDACA,+BAAOL,EAAME,OAAOI,mBAE3B,KATL,UAUKN,EAAME,OAAOK,mBAVlB,aAUK,EAA0BC,KAAI,SAACC,EAAqBC,GACrD,OAAQ,sBAAKL,UAAY,MAAjB,UACI,sBAAKA,UAAY,OAAjB,UACI,wCACA,+BAAOI,EAAME,UAEjB,sBAAKN,UAAU,aAAf,UACI,+CACA,iCAAM,uCAAN,IAA0BO,YAAMH,EAAMI,YAAtC,UAEa,OAAhBJ,EAAMK,MACH,sBAAKT,UAAY,QAAjB,UACI,yCACA,iCACI,mBAAGU,KAAQd,EAAQe,OAAS,SAA5B,SACKP,EAAMK,QAEX,qFAAuD,iCAASd,EAAME,OAAOC,gBAIxF,KACkB,OAAlBM,EAAMQ,QACH,sBAAKZ,UAAY,UAAjB,UACI,2CACA,+BAAOO,YAAMH,EAAMQ,cAE1B,KAEoB,OAApBR,EAAMS,UACP,sBAAKb,UAAY,QAAjB,UACI,yCACA,iCAEI,mBAAGU,KAAQd,EAAQe,OAAS,SAA5B,SACI,qBAAMG,IAAKV,EAAMS,UAAWE,IAAO,KAAOpB,EAAME,OAAOC,KAAO,WAElE,uBALJ,IAKW,wFAA0D,iCAASH,EAAME,OAAOC,gBAI9F,OAxCyBO,SA8C7C,QCrCFW,G,MArBoB,SAACrB,GAChC,OACI,sBAAKK,UAAU,UAAf,UACKL,EAAMsB,QACH,qBAAKjB,UAAU,SAAf,wBAAyC,KAC5CL,EAAMuB,UAAUvB,EAAMwB,IACnB,sBAAKnB,UAAU,WAAf,UACKL,EAAMuB,SACH,qFACsDvB,EAAMyB,MAD5D,MACqE,uBACjE,mBAAGV,KAAI,iDAA4Cf,EAAMyB,OAAST,OAAO,SAAzE,yCAGP,KACAhB,EAAMwB,IAAN,wFAAkG,QAE1G,UCwDEE,EA3EH,WAAM,IAAD,EACSC,mBAAiB,IAD1B,mBACTF,EADS,KACHG,EADG,OAEWD,mBAAc,IAFzB,mBAETzB,EAFS,KAEF2B,EAFE,OAGaF,oBAAkB,GAH/B,mBAGTvB,EAHS,KAGD0B,EAHC,OAIaH,oBAAkB,GAJ/B,mBAITL,EAJS,KAIDS,EAJC,OAKeJ,oBAAkB,GALjC,mBAKTJ,EALS,KAKAS,EALA,OAMiBL,oBAAkB,GANnC,mBAMTM,EANS,KAMCC,EAND,OAOKP,oBAAkB,GAPvB,mBAOTH,EAPS,KAOLW,EAPK,KAcTC,EAAS,WACb,GAAW,KAARX,EAAY,OAAOS,GAAa,GACnCH,GAAW,GACXD,GAAW,GACXE,GAAY,GACZG,GAAO,GACLE,MAAM,yCAAD,OAA0CZ,GAAS,CACtDa,QAAS,CACPC,cAAe,oDAGlBC,MAAK,SAAAC,GACJ,OAAOA,EAAIC,UAGZF,MAAK,SAACtC,GAA4B,IAAD,EAChC2B,EAAU3B,GACV4B,GAAW,GACXC,GAAW,GACXC,GAAY,GACY,sBAAvB,UAAA9B,EAAO,UAAP,eAAWyC,UACZb,GAAW,GACXC,GAAW,GACXC,GAAY,IAEZJ,EAAS,OAIZgB,OAAM,WACLT,GAAO,GACPL,GAAW,GACXC,GAAW,GACXC,GAAY,GACZG,GAAO,OAGX,OACE,sBAAK9B,UAAY,MAAjB,UACI,sBAAKA,UAAY,SAAjB,UACE,uBACAM,KAAO,OAAOF,MAASgB,EACvBoB,QAAW,SAACC,GAAmC,KAAlBA,EAAMC,SAAgBX,KACnDY,SAhDa,SAACC,GACpBrB,EAASqB,EAAEjC,OAAOP,OAClByB,GAAa,GACbF,GAAY,IA6CoBkB,YAAc,qBACxC,wBAAQC,QAAWf,EAAnB,gBACCH,EAAU,mBAAG5B,UAAY,YAAf,oCAAsD,QAEnE,cAAC,EAAD,CACEiB,QAAWA,EACXlB,QAAWA,EACXqB,MAASA,EACTF,SAAYA,EACZC,IAAOA,IAET,cAAC,EAAD,CACEpB,QAAWA,EACXF,OAAUA,QCxEpBkD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.bfdb63cc.chunk.js","sourcesContent":["import './Result.css'\r\nimport parse from 'html-react-parser';\r\nimport {ResultType,ResultObj} from '../Interfaces/Interfaces'\r\ntype Props = {\r\n    getData:boolean;\r\n    result:ResultObj;\r\n}\r\nexport const Result : React.FC <Props> = (props) => {\r\n    const picUrl:string = `https://www.google.com/search?q=${props.result.word}&tbm=isch&sxsrf=ALeKk037CG3UAeAPXBwJ5-Vpq_tnYvVj6A%3A1626383806124&source=hp&biw=1366&bih=625&ei=vqXwYNrFBMPQ-gTEspSgBw&oq=lamp&gs_lcp=CgNpbWcQAzIECCMQJzIFCAAQsQMyBQgAELEDMgUIABCxAzIFCAAQsQMyBQgAELEDMgIIADICCAAyBQgAELEDMgUIABCxAzoICAAQsQMQgwFQ_B9YwyZgsytoAHAAeACAAbwCiAHFCZIBBTItMS4zmAEAoAEBqgELZ3dzLXdpei1pbWc&sclient=img&ved=0ahUKEwjanJ7o_-XxAhVDqJ4KHUQZBXQQ4dUDCAc&uact=5`;\r\n    return ( <div> \r\n                {props.getData?\r\n                    <div className = 'result'>\r\n                        <div className = 'word'>\r\n                            <strong>{props.result.word}</strong>\r\n                        </div>\r\n                        {props.result.pronunciation !== null?\r\n                            <div className='pronunciation'>\r\n                                <span>Pronunciation</span> \r\n                                <span>{props.result.pronunciation}</span>\r\n                            </div>\r\n                        :null}     \r\n                        {props.result.definitions?.map((value : ResultType , index : number)=>{\r\n                        return  <div className = 'row' key = {index}>\r\n                                    <div className = 'type'> \r\n                                        <span >Type</span>\r\n                                        <span>{value.type}</span>\r\n                                    </div>\r\n                                    <div className='definition'>\r\n                                        <span > definition</span>\r\n                                        <span><strong>-</strong> {parse(value.definition)} </span>\r\n                                    </div>                                      \r\n                                    {value.emoji !== null?\r\n                                        <div className = 'emoji'>\r\n                                            <span >Emoji</span>\r\n                                            <span>\r\n                                                <a href = {picUrl} target = '_blank' > \r\n                                                    {value.emoji}\r\n                                                </a>\r\n                                                <p>* Click on the emoji to see more emojies related to <strong>{props.result.word}</strong></p>\r\n                                            </span>\r\n                                                    \r\n                                        </div>\r\n                                    :null}\r\n                                    {value.example !== null?\r\n                                        <div className = 'example'> \r\n                                            <span >Example</span>\r\n                                            <span>{parse(value.example)}</span>\r\n                                        </div>\r\n                                    :null }  \r\n\r\n                                    {value.image_url !== null?\r\n                                    <div className = 'image'>\r\n                                        <span>Image</span>\r\n                                        <span>\r\n                                            \r\n                                            <a href = {picUrl} target = '_blank' > \r\n                                                <img  src={value.image_url} alt = {'A ' + props.result.word + ' pic'} />\r\n                                            </a>\r\n                                            <br /> <p>* Click on the picture to see more pictures related to <strong>{props.result.word}</strong></p>\r\n                                        </span>\r\n                                            \r\n                                    </div>\r\n                                    :null}          \r\n                                    \r\n                                </div>\r\n                        })}\r\n                        \r\n                    </div>\r\n                :null}\r\n            </div>\r\n     );\r\n}\r\n \r\nexport default Result;","import './Spinner.css'\r\n// import {ResultObj} from '../Interfaces/Interfaces'\r\ntype Props = {\r\n    loading: boolean;\r\n    getData: boolean;\r\n    noResult: boolean;\r\n    input: string;\r\n    err:boolean;\r\n}  \r\n// instead of props as a parameter  we can write : {loading, getData, input}\r\nconst Spinner : React.FC <Props> = (props) => {\r\n    return ( \r\n        <div className='loading'>\r\n            {props.loading?\r\n                <div className=\"loader\">Loading...</div>:null}\r\n            {props.noResult||props.err?\r\n                <div className='noResult'>\r\n                    {props.noResult?\r\n                        <div>\r\n                            Sorry we couln't find any results for the word: \"{props.input}\". <br />\r\n                            <a href={`https://www.ldoceonline.com/dictionary/${props.input}`} target='_blank'>\r\n                                You may look it up here </a>\r\n                        </div>\r\n                    :null}\r\n                    {props.err?`Opps! Something went wrong, please check your internet connection or try again later.`:null}\r\n                </div>\r\n            :null}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Spinner;","import React, { useState } from 'react';\nimport {ResultObj} from './components/Interfaces/Interfaces'\nimport './App.css';\nimport {Result} from './components/Result/Result';\nimport Spinner from './components/Spinner/Spinner';\n// var Owlbot = require('owlbot-js');\n// var client = Owlbot('03bc50f819a9f19c4d4946a3e0813f87179dc74f');\nconst App = ()=> {\n  const[input,setInput] = useState<string>('');\n  const[result,setResult] = useState<any>([]);\n  const[getData,setGetData] = useState<boolean>(false);\n  const[loading,setLoading] = useState<boolean>(false);\n  const[noResult,setNoResult] = useState<boolean>(false);\n  const[warnInput,setWarnInput] = useState<boolean>(false);\n  const[err,setErr] = useState<boolean>(false);\n\n  const changeHandle = (e: React.ChangeEvent<HTMLInputElement>):void=>{\n    setInput(e.target.value);\n    setWarnInput(false);   \n    setNoResult(false);  \n  } \n  const lookUp = ():void=>{\n    if(input==='') return setWarnInput(true);\n    setLoading(true);\n    setGetData(false);\n    setNoResult(false);\n    setErr(false)\n      fetch(`https://owlbot.info/api/v4/dictionary/${input}`, {\n        headers: {\n          Authorization: \"Token b1921c221f0ed059edc2e3af4c2613885e1c80fe\"\n        }\n      })\n      .then(res => {    \n        return res.json();\n      } \n      )\n      .then((result:ResultObj[]):void=> {\n        setResult(result)\n        setGetData(true)\n        setLoading(false)\n        setNoResult(false)\n      if(result[0]?.message === 'No definition :('){\n        setGetData(false)\n        setLoading(false)\n        setNoResult(true)\n      }else{\n        setInput('')\n      }\n    }\n    )\n    .catch(()=>{\n      setErr(true)\n      setGetData(false)\n      setLoading(false)\n      setNoResult(false)\n      setErr(true)\n    })\n  } \n  return ( \n    <div className = 'App'>\n        <div className = 'header'>\n          <input \n          type = \"text\" value = {input} \n          onKeyUp = {(event):void=>{if(event.keyCode === 13){lookUp()}}} \n          onChange = {changeHandle} placeholder = 'Enter a word ...'/>\n          <button onClick = {lookUp}>Go</button>\n          {warnInput?<p className = 'warnInput'> *Please enter a word.</p>:null}\n        </div>\n        <Spinner \n          loading = {loading}\n          getData = {getData}\n          input = {input}\n          noResult = {noResult}\n          err = {err}\n        />\n        <Result\n          getData = {getData}\n          result = {result}\n        />\n      </div>\n     );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}